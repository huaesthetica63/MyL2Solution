package main

/*
=== Базовая задача ===

Создать программу печатающую точное время с использованием NTP библиотеки.Инициализировать как go module.
Использовать библиотеку https://github.com/beevik/ntp.
Написать программу печатающую текущее время / точное время с использованием этой библиотеки.

Программа должна быть оформлена с использованием как go module.
Программа должна корректно обрабатывать ошибки библиотеки: распечатывать их в STDERR и возвращать ненулевой код выхода в OS.
Программа должна проходить проверки go vet и golint.
*/
import (
	"fmt"
	"log"
	"time"

	"github.com/beevik/ntp"
)

//для того, чтобы легче было тестировать программу,
//сделаем отдельную функцию, которая будет возвращать время, ее мы и добавим в тест в другом файле
func GetNTPTime() time.Time {
	time, err := ntp.Time("0.beevik-ntp.pool.ntp.org") //подключаемся по туториалу из гитхаба
	//к этому NTP-серверу, он должен вернуть нам текущее время в нашем часовом поясе или ошибку
	if err != nil { //проверяем на ошибку
		//тут есть несколько способов записи в stderr
		//основной способ с логгером
		log.Fatal(err) //так мы и в stderr ошибку выведем, и после этого еще os.Exit(1) заодно

		//2) fmt.Fprintf(os.Stderr, err.Error()) - второй способ с fprintf, выбираем нужный поток -
		//stderr, выводим ошибку

		//3) os.Stderr.WriteString(err.Error()) - третий способ , обращаемся к stderr напрямую благодаря os

		//os.Exit(1) - в отличие от незакоменченного способа, все остальные нуждаются в этой строке
	}
	return time //возвращаем время из функции
}

//в функции main описано использование этой функции на простом примере
func main() {
	fmt.Println("Текущее местное время с NTP-сервера: ", GetNTPTime())
	fmt.Println("time.Now(): ", time.Now()) //на всякий случай выводим и системную функцию, разница между ними
	//должна быть практически сведена к нулю, если время с сервера точное
}

//запускаем великолепную программу через go run 1task, чтобы лишний раз не смотреть на часы
