package pattern

/*
	Реализовать паттерн «состояние».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/State_pattern
*/

/*
Паттерн "состояние" применяется в случаях, когда в программе есть объекты, которые
могут часто менять свое состояние, и от текущего состояния зависит поведение этого объекта,
паттерн позволяет также избавиться от множества условных конструкций, которые
проверяют состояние объекта, для того, чтобы выполнить какое-либо действие

Реальный пример: пусть у нас есть некоторое устройство (например, ЭБУ в автомобиле) с множеством датчиков,
способное посылать какие-то команды или производить вычисления на основе этих показаний (показания отражают
текущее состояние устройства): так, если датчик замера напряжения на аккумуляторе показывает, что все плохо,
высвечивается предупреждающее значение, если срабатывают датчики тормозной системы (абс например), подается
команда изменить тормозное усилие, чтобы стабилизировать движение, если скорость слишком высокая, включается
ограничитель и так далее. У объекта есть достаточно много состояний и они постоянно меняются,
от их совокупности зависит, какие действия осуществляет блок управления. Поэтому я предполагаю,
что в сфере программирования микроконтроллерных устройств такой паттерн должен встречаться довольно часто

Плюсы: избавляет нас от множества if'ов, которые были нужны, чтобы определить,
в каком состоянии объект, и что при нем нужно делать; концентрирует код, связанный
с действиями, зависящими от состояния, в одном месте

Минусы: если состояний мало и они чаще всего статичны во время работы объекта, то
такой паттерн только усложнит код, не проявив себя эффективно
*/

import "fmt"

//приведем пример с телевизором
//интерфейс, представляющий собой состояние объекта
type State interface {
	Action()
}
type OnState struct{} //состояние включения тв
func (st *OnState) Action() {
	fmt.Println("Телевизор включен!")
}

type OffState struct{} //состояние выключения тв
func (st *OffState) Action() {
	fmt.Println("Телевизор выключен!")
}

type PlugState struct{} //что-то подключили по  HDMI
func (st *PlugState) Action() {
	fmt.Println("Подключено устройство по HDMI!")
}

//контекст - наш телевизор с сохраненным текущим состоянием
type TVContext struct {
	CurrState State //текущее состояние
}

func (tv *TVContext) Action() {
	tv.CurrState.Action() //вызываем действие в зависимости от текущего состояния
}
func main() {
	tv := &TVContext{} //создаем наш телевизор
	var curstate State
	curstate = &OnState{}
	tv.CurrState = curstate
	tv.Action()
	curstate = &PlugState{}
	tv.CurrState = curstate
	tv.Action()
	curstate = &OffState{}
	tv.CurrState = curstate
	tv.Action()
}
